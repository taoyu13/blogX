import{_ as a,o as s,c as e,V as n}from"./chunks/framework.dd578c14.js";const b=JSON.parse('{"title":"基础扫盲","description":"","frontmatter":{},"headers":[],"relativePath":"server/java/point.md","lastUpdated":null}'),t={name:"server/java/point.md"},l=n(`<h1 id="基础扫盲" tabindex="-1">基础扫盲 <a class="header-anchor" href="#基础扫盲" aria-label="Permalink to &quot;基础扫盲&quot;">​</a></h1><p>特别鸣谢：本部分内容由 chatgpt-4 倾情提供</p><h4 id="注解-dto" tabindex="-1"><a href="#annotation">注解</a> ｜ <a href="#dto">DTO</a> <a class="header-anchor" href="#注解-dto" aria-label="Permalink to &quot;[注解](#annotation) ｜ [DTO](#dto)&quot;">​</a></h4><hr><h4 id="bean" tabindex="-1"><a href="#Bean">Bean</a> <a class="header-anchor" href="#bean" aria-label="Permalink to &quot;[Bean](#Bean)&quot;">​</a></h4><hr><h4 id="mybatis-lombok" tabindex="-1"><a href="#Mybatis">Mybatis</a> ｜ <a href="#Lombok">Lombok</a> <a class="header-anchor" href="#mybatis-lombok" aria-label="Permalink to &quot;[Mybatis](#Mybatis) ｜ [Lombok](#Lombok)&quot;">​</a></h4><h2 id="一、基础名词" tabindex="-1">一、基础名词 <a class="header-anchor" href="#一、基础名词" aria-label="Permalink to &quot;一、基础名词&quot;">​</a></h2><h3 id="_1-注解-提供元数据" tabindex="-1"><span id="annotation">1. 注解：提供元数据</span> <a class="header-anchor" href="#_1-注解-提供元数据" aria-label="Permalink to &quot;&lt;span id=&quot;annotation&quot;&gt;1. 注解：提供元数据&lt;/span&gt;&quot;">​</a></h3><hr><h4 id="常见注解-1-常见注解-2" tabindex="-1"><a href="https://blog.csdn.net/qq_40298902/article/details/107746642?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168172304916800225565826%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168172304916800225565826&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-107746642-null-null.142%5Ev83%5Einsert_down38,239%5Ev2%5Einsert_chatgpt&amp;utm_term=springboot%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3&amp;spm=1018.2226.3001.4187" target="_blank" rel="noreferrer">常见注解 1</a> ｜ <a href="https://blog.csdn.net/qq_46138492/article/details/129476788?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-129476788-blog-107746642.235%5Ev29%5Epc_relevant_default_base3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-129476788-blog-107746642.235%5Ev29%5Epc_relevant_default_base3&amp;utm_relevant_index=2" target="_blank" rel="noreferrer">常见注解 2</a> <a class="header-anchor" href="#常见注解-1-常见注解-2" aria-label="Permalink to &quot;[常见注解 1](https://blog.csdn.net/qq_40298902/article/details/107746642?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168172304916800225565826%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168172304916800225565826&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-107746642-null-null.142^v83^insert_down38,239^v2^insert_chatgpt&amp;utm_term=springboot%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3&amp;spm=1018.2226.3001.4187) ｜ [常见注解 2](https://blog.csdn.net/qq_46138492/article/details/129476788?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-129476788-blog-107746642.235%5Ev29%5Epc_relevant_default_base3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-129476788-blog-107746642.235%5Ev29%5Epc_relevant_default_base3&amp;utm_relevant_index=2)&quot;">​</a></h4><blockquote><p>Java 注解（Annotation）是一种特殊的语法结构，它用于为 Java 代码提供额外的元数据信息。注解不会直接影响程序的执行，但它可以被其他工具、框架或编译器读取并执行特定操作。换句话说，注解是一种给代码添加标记的方式，这些标记可以被其他代码读取和处理。</p></blockquote><p>注解的作用主要体现在以下几个方面：</p><p>编译器检查：通过注解，我们可以告诉编译器在编译过程中对代码进行特定的检查，从而提高代码质量。例如，@Override 注解表示一个方法是重写了父类的方法，编译器会检查该方法是否确实重写了父类的方法，如果没有，编译器会报错。</p><p>代码生成：一些注解可以用于在编译时生成额外的代码。例如，Lombok 库中的 @Getter 和 @Setter 注解可以自动生成 getter 和 setter 方法，减少了手动编写这些方法的工作量。</p><p>配置信息：注解可以作为配置信息来使用，为程序提供元数据。例如，Spring 框架中的 @Autowired 注解可以实现依赖注入，通过这种方式可以将组件的创建和配置与代码逻辑解耦，使程序更易于维护。</p><p>运行时处理：有些注解可以在运行时被读取，从而影响程序的行为。例如，Java 的反射 API 可以读取类、方法或字段上的注解信息，然后根据这些信息动态地执行某些操作。</p><p>总之，Java 注解是一种给代码添加额外信息的方式，这些信息可以被编译器、框架或其他工具读取和处理，从而实现对代码的额外控制和管理。</p><h3 id="_2-dto-数据传输对象" tabindex="-1"><span id="dto">2. DTO：数据传输对象</span> <a class="header-anchor" href="#_2-dto-数据传输对象" aria-label="Permalink to &quot;&lt;span id=&quot;dto&quot;&gt;2. DTO：数据传输对象&lt;/span&gt;&quot;">​</a></h3><hr><h4 id="详细教程" tabindex="-1"><a href="https://blog.csdn.net/m0_70627393/article/details/125248756?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168172367516800225577312%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168172367516800225577312&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-125248756-null-null.142%5Ev83%5Einsert_down38,239%5Ev2%5Einsert_chatgpt&amp;utm_term=java%20dto&amp;spm=1018.2226.3001.4187" target="_blank" rel="noreferrer">详细教程</a> <a class="header-anchor" href="#详细教程" aria-label="Permalink to &quot;[详细教程](https://blog.csdn.net/m0_70627393/article/details/125248756?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168172367516800225577312%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168172367516800225577312&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-125248756-null-null.142^v83^insert_down38,239^v2^insert_chatgpt&amp;utm_term=java%20dto&amp;spm=1018.2226.3001.4187)&quot;">​</a></h4><blockquote><p>简单来说 Model 面向业务，我们是通过业务来定义 Model 的。而 DTO 是面向界面 UI，是通过 UI 的需求来定义的。</p></blockquote><blockquote><p>通过 DTO 我们实现了表现层与 Model 之间的解耦，表现层不引用 Model，如果开发过程中我们的模型改变了，而界面没变，我们就只需要改 Model 而不需要去改表现层中的东西。</p></blockquote><blockquote><p>一般我们使用 DTO 类来继承 entity 实体类，在 DTO 类里放一些业务字段，并提供 get、set 方法。当我们在业务逻辑层或者交互层用到一些数据库中不存在的字段时，</p></blockquote><blockquote><p>比如：我的项目中，使用 DTO 对 offset,limit,order,sort,search 这些字段在数据库是没有的。我们就需要在 DTO 类里放这些字段，这些字段的意义就相当于一些经处理过的数据库字段，实质意义就是方便数据交互，提高效率。</p></blockquote><h2 id="二、springboot" tabindex="-1">二、Springboot <a class="header-anchor" href="#二、springboot" aria-label="Permalink to &quot;二、Springboot&quot;">​</a></h2><h3 id="_1-bean" tabindex="-1"><span id="Bean">1. Bean</span> <a class="header-anchor" href="#_1-bean" aria-label="Permalink to &quot;&lt;span id=&quot;Bean&quot;&gt;1. Bean&lt;/span&gt;&quot;">​</a></h3><blockquote><p>在 Spring Boot 中，Bean（即 Bean 类）是一个重要的概念。Bean 是 Java 对象的一个实例，它由 Spring 容器管理并配置。Bean 的创建、初始化、销毁以及它们之间的关系都由 Spring 容器负责。这使得我们能够更好地组织和管理代码，降低各个组件之间的耦合度。<a href="https://blog.csdn.net/keepfriend/article/details/121281051?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168172519116782427425062%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168172519116782427425062&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-121281051-null-null.142%5Ev83%5Einsert_down38,239%5Ev2%5Einsert_chatgpt&amp;utm_term=spring%20bean&amp;spm=1018.2226.3001.4187" target="_blank" rel="noreferrer">更多</a></p></blockquote><p>Bean 的应用主要体现在以下几个方面：</p><ol><li><p>依赖注入（Dependency Injection）：Spring 容器负责创建和管理 Bean，当一个组件需要使用另一个组件时，Spring 可以自动将所需的 Bean 注入到目标组件中。这种方式避免了在代码中手动创建和管理对象实例，提高了代码的可维护性和可测试性。在 Spring Boot 中，我们可以使用 @Autowired 注解实现自动注入。</p></li><li><p>生命周期管理：Spring 容器负责管理 Bean 的整个生命周期，从创建到销毁。这意味着开发者可以专注于编写业务逻辑，而不必担心对象的创建和销毁。此外，Spring 还提供了一些注解（如 @PostConstruct 和 @PreDestroy），可以用于在 Bean 生命周期的特定阶段执行自定义操作。</p></li><li><p>配置管理：通过使用 Spring 的配置功能，我们可以将应用程序的配置信息从代码中分离出来，使代码更加易于维护。例如，通过使用 @Value 注解，我们可以将外部配置文件中的值注入到 Bean 中。</p></li><li><p>切面编程（Aspect-Oriented Programming, AOP）：Spring Boot 支持 AOP，它允许我们在不修改原始代码的情况下向应用程序添加额外功能。例如，我们可以使用 AOP 在方法执行前后添加日志记录功能。这种方式能够让我们更好地对代码进行模块化，提高代码的可重用性和可维护性。</p></li></ol><p>总之，Spring Boot 中的 Bean 是一个核心概念，它有助于降低组件之间的耦合度，简化配置和依赖管理，以及实现高度模块化的代码结构。通过使用 Spring Boot，开发者可以更专注于业务逻辑的实现，提高开发效率。</p><h2 id="三、常用框架" tabindex="-1">三、常用框架 <a class="header-anchor" href="#三、常用框架" aria-label="Permalink to &quot;三、常用框架&quot;">​</a></h2><h3 id="_1-mybatis-持久层-orm-框架" tabindex="-1"><span id="Mybatis">1. Mybatis：持久层 ORM 框架</span> <a class="header-anchor" href="#_1-mybatis-持久层-orm-框架" aria-label="Permalink to &quot;&lt;span id=&quot;Mybatis&quot;&gt;1. Mybatis：持久层 ORM 框架&lt;/span&gt;&quot;">​</a></h3><hr><h4 id="教程-1-教程-2-plus-教程-1-plus-教程-2" tabindex="-1"><a href="https://harmony.blog.csdn.net/article/details/123220572?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-123220572-blog-124563447.235%5Ev29%5Epc_relevant_default_base3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-123220572-blog-124563447.235%5Ev29%5Epc_relevant_default_base3&amp;utm_relevant_index=2" target="_blank" rel="noreferrer">教程 1</a> ｜ <a href="https://blog.csdn.net/m0_66734853/article/details/124563447?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168171333016800182116813%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168171333016800182116813&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-124563447-null-null.142%5Ev83%5Einsert_down38,239%5Ev2%5Einsert_chatgpt&amp;utm_term=mybatis%E6%95%99%E7%A8%8B&amp;spm=1018.2226.3001.4187" target="_blank" rel="noreferrer">教程 2</a> ｜ <a href="https://blog.csdn.net/qq_38490457/article/details/108809902?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168169223516800222816678%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168169223516800222816678&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-108809902-null-null.142%5Ev83%5Einsert_down38,239%5Ev2%5Einsert_chatgpt&amp;utm_term=mybatis-plus&amp;spm=1018.2226.3001.4187" target="_blank" rel="noreferrer">plus 教程 1</a> ｜ <a href="https://baomidou.com/" target="_blank" rel="noreferrer">plus 教程 2</a> <a class="header-anchor" href="#教程-1-教程-2-plus-教程-1-plus-教程-2" aria-label="Permalink to &quot;[教程 1](https://harmony.blog.csdn.net/article/details/123220572?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-123220572-blog-124563447.235%5Ev29%5Epc_relevant_default_base3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-123220572-blog-124563447.235%5Ev29%5Epc_relevant_default_base3&amp;utm_relevant_index=2) ｜ [教程 2](https://blog.csdn.net/m0_66734853/article/details/124563447?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168171333016800182116813%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168171333016800182116813&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-124563447-null-null.142^v83^insert_down38,239^v2^insert_chatgpt&amp;utm_term=mybatis%E6%95%99%E7%A8%8B&amp;spm=1018.2226.3001.4187) ｜ [plus 教程 1](https://blog.csdn.net/qq_38490457/article/details/108809902?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168169223516800222816678%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168169223516800222816678&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-108809902-null-null.142^v83^insert_down38,239^v2^insert_chatgpt&amp;utm_term=mybatis-plus&amp;spm=1018.2226.3001.4187) ｜ [plus 教程 2](https://baomidou.com/)&quot;">​</a></h4><blockquote><p>MyBatis 是一个用于 Java 平台的持久层框架，它提供了一种简洁易用的方式来处理关系型数据库的数据操作。MyBatis 可以将 SQL 语句与 Java 代码分离，使开发者能够更直观地编写和维护 SQL 语句。同时，MyBatis 通过对象关系映射（ORM）功能将数据库表与 Java 对象进行关联，将数据库操作抽象为 Java 对象的操作，简化了数据访问层的代码。</p></blockquote><p>MyBatis 的主要概念和用法包括：</p><ol><li><p>映射文件：映射文件是 MyBatis 中的核心配置文件，它包含了 SQL 语句和结果映射的定义。映射文件将 SQL 语句与 Java 代码分离，使 SQL 语句的编写和维护变得更加简单。映射文件中的 SQL 语句可以通过 XML 或注解的方式来编写。</p></li><li><p>SQL 会话（SqlSession）：SqlSession 是 MyBatis 的主要接口，它提供了执行 SQL 语句的方法。SqlSession 是线程不安全的，因此通常在每个请求或事务中都会创建一个新的 SqlSession 实例。SqlSession 可以通过 SqlSessionFactory 工厂类来创建。</p></li><li><p>映射接口（Mapper 接口）：Mapper 接口是一个 Java 接口，它定义了与数据库进行交互的方法。每个方法对应于映射文件中的一个 SQL 语句。通过调用 Mapper 接口的方法，我们可以执行 SQL 语句并获取结果。Mapper 接口通常与映射文件关联，MyBatis 会自动生成 Mapper 接口的实现类。</p></li><li><p>对象关系映射（ORM）：MyBatis 通过将数据库表的列映射到 Java 对象的属性，实现了对象关系映射。这意味着我们可以将数据库操作抽象为 Java 对象的操作，简化数据访问层的代码。在映射文件中，我们可以定义结果映射（ResultMap）来描述这种映射关系。</p></li></ol><p>MyBatis 的典型用法包括以下步骤：</p><ol><li><p>编写映射文件：在映射文件中定义 SQL 语句和结果映射。</p></li><li><p>配置 MyBatis：通过 XML 或 Java 配置文件，配置 MyBatis 的相关设置，如数据源、事务管理器等。</p></li><li><p>创建 Mapper 接口：定义与数据库进行交互的 Java 方法。</p></li><li><p>获取 SqlSession 实例：通过 SqlSessionFactory 工厂类创建 SqlSession 实例。</p></li><li><p>调用 Mapper 接口的方法：通过 SqlSession 获取 Mapper 接口的实现类，调用相应的方法执行 SQL 语句并获取结果。</p></li></ol><h3 id="_2-lombok-自动生成类的各种方法" tabindex="-1"><span id="Lombok">2. Lombok：自动生成类的各种方法</span> <a class="header-anchor" href="#_2-lombok-自动生成类的各种方法" aria-label="Permalink to &quot;&lt;span id=&quot;Lombok&quot;&gt;2. Lombok：自动生成类的各种方法&lt;/span&gt;&quot;">​</a></h3><hr><h4 id="插件安装与使用" tabindex="-1"><a href="https://blog.csdn.net/dkm123456/article/details/123028189?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=lombok%E6%95%99%E7%A8%8B&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-123028189.142%5Ev83%5Einsert_down38,239%5Ev2%5Einsert_chatgpt&amp;spm=1018.2226.3001.4187" target="_blank" rel="noreferrer">插件安装与使用</a> <a class="header-anchor" href="#插件安装与使用" aria-label="Permalink to &quot;[插件安装与使用](https://blog.csdn.net/dkm123456/article/details/123028189?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=lombok%E6%95%99%E7%A8%8B&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-123028189.142^v83^insert_down38,239^v2^insert_chatgpt&amp;spm=1018.2226.3001.4187)&quot;">​</a></h4><blockquote><p>Lombok 是一个用于 Java 的库，旨在通过注解的方式简化 Java 代码的编写。它可以自动生成一些通用的、容易出错的代码，如 getter、setter 方法、构造函数、equals()、hashCode() 等。通过使用 Lombok，开发者可以减少样板代码的编写，提高代码的可读性和可维护性。</p></blockquote><p>Lombok 的主要概念和用法包括：</p><h4 id="_1-getter-setter" tabindex="-1">1. @Getter/@Setter <a class="header-anchor" href="#_1-getter-setter" aria-label="Permalink to &quot;1. @Getter/@Setter&quot;">​</a></h4><blockquote><p>这两个注解用于自动生成 getter 和 setter 方法。将这些注解添加到类或字段上，Lombok 会在编译时为相应的属性生成相应的 getter 和 setter 方法。</p></blockquote><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lombok</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Getter</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lombok</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Setter</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Getter</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Setter</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> age</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="_2-tostring" tabindex="-1">2. @ToString <a class="header-anchor" href="#_2-tostring" aria-label="Permalink to &quot;2. @ToString&quot;">​</a></h4><blockquote><p>此注解用于自动生成 toString() 方法。添加 @ToString 注解后，Lombok 会在编译时生成一个包含所有非静态字段的 toString() 方法。</p></blockquote><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lombok</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">ToString</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">ToString</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> age</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="_3-equalsandhashcode" tabindex="-1">3. @EqualsAndHashCode <a class="header-anchor" href="#_3-equalsandhashcode" aria-label="Permalink to &quot;3. @EqualsAndHashCode&quot;">​</a></h4><blockquote><p>此注解用于自动生成 equals() 和 hashCode() 方法。添加 @EqualsAndHashCode 注解后，Lombok 会在编译时生成基于所有非静态字段的 equals() 和 hashCode() 方法。</p></blockquote><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lombok</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">EqualsAndHashCode</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">EqualsAndHashCode</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> age</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="_4-noargsconstructor-allargsconstructor-requiredargsconstructor" tabindex="-1">4. @NoArgsConstructor/@AllArgsConstructor/@RequiredArgsConstructor <a class="header-anchor" href="#_4-noargsconstructor-allargsconstructor-requiredargsconstructor" aria-label="Permalink to &quot;4. @NoArgsConstructor/@AllArgsConstructor/@RequiredArgsConstructor&quot;">​</a></h4><blockquote><p>这三个注解用于自动生成构造函数。@NoArgsConstructor 生成一个无参构造函数；@AllArgsConstructor 生成一个包含所有字段的构造函数；@RequiredArgsConstructor 生成一个包含所有使用 @NonNull 注解的字段的构造函数。</p></blockquote><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lombok</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">NoArgsConstructor</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lombok</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">AllArgsConstructor</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lombok</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">RequiredArgsConstructor</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lombok</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">NonNull</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RequiredArgsConstructor</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">NonNull</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> age</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="_5-data" tabindex="-1">5. @Data <a class="header-anchor" href="#_5-data" aria-label="Permalink to &quot;5. @Data&quot;">​</a></h4><blockquote><p>这个注解是一个综合注解，包括了 @Getter、@Setter、@ToString、@EqualsAndHashCode 和 @RequiredArgsConstructor 的功能。将 @Data 注解添加到类上，Lombok 会在编译时为类生成所有这些方法。</p></blockquote><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lombok</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">lombok</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">NonNull</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Data</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">NonNull</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> age</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>要使用 Lombok，需要将 Lombok 库添加到项目的依赖中。对于使用 Maven 或 Gradle 的项目，可以在构建文件中添加相应的依赖。此外，大多数现代 IDE（如 IntelliJ IDEA 和 Eclipse）都需要安装相应的 Lombok 插件，以便正确识别和处理 Lombok 注解。</p><p>总之，Lombok 是一个实用的 Java 库，可以帮助开发者减少样板代码的编写，提高代码的可读性和可维护性。通过使用 Lombok 注解，开发者可以专注于业务逻辑，而无需花费过多精力编写重复的代码。</p>`,62),o=[l];function p(r,i,c,u,d,m){return s(),e("div",null,o)}const A=a(t,[["render",p]]);export{b as __pageData,A as default};
